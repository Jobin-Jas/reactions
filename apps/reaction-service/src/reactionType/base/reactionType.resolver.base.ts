/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReactionTypeArgs } from "./CreateReactionTypeArgs";
import { UpdateReactionTypeArgs } from "./UpdateReactionTypeArgs";
import { DeleteReactionTypeArgs } from "./DeleteReactionTypeArgs";
import { ReactionTypeCountArgs } from "./ReactionTypeCountArgs";
import { ReactionTypeFindManyArgs } from "./ReactionTypeFindManyArgs";
import { ReactionTypeFindUniqueArgs } from "./ReactionTypeFindUniqueArgs";
import { ReactionType } from "./ReactionType";
import { ReactionTypeService } from "../reactionType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReactionType)
export class ReactionTypeResolverBase {
  constructor(
    protected readonly service: ReactionTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "read",
    possession: "any",
  })
  async _reactionTypesMeta(
    @graphql.Args() args: ReactionTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReactionType])
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "read",
    possession: "any",
  })
  async reactionTypes(
    @graphql.Args() args: ReactionTypeFindManyArgs
  ): Promise<ReactionType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReactionType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "read",
    possession: "own",
  })
  async reactionType(
    @graphql.Args() args: ReactionTypeFindUniqueArgs
  ): Promise<ReactionType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReactionType)
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "create",
    possession: "any",
  })
  async createReactionType(
    @graphql.Args() args: CreateReactionTypeArgs
  ): Promise<ReactionType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReactionType)
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "update",
    possession: "any",
  })
  async updateReactionType(
    @graphql.Args() args: UpdateReactionTypeArgs
  ): Promise<ReactionType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReactionType)
  @nestAccessControl.UseRoles({
    resource: "ReactionType",
    action: "delete",
    possession: "any",
  })
  async deleteReactionType(
    @graphql.Args() args: DeleteReactionTypeArgs
  ): Promise<ReactionType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
